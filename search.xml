<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>objdump与GDB教程</title>
      <link href="/2019/11/28/objdump%E4%B8%8EGDB%E6%95%99%E7%A8%8B/"/>
      <url>/2019/11/28/objdump%E4%B8%8EGDB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="初识objdum与GDB"><a href="#初识objdum与GDB" class="headerlink" title="初识objdum与GDB"></a>初识objdum与GDB</h1><a id="more"></a><h2 id="objdump："><a href="#objdump：" class="headerlink" title="objdump："></a>objdump：</h2><p>objdump主要用于静态分析，因此对于objdump的使用一般调出反汇编内容进行分析。<br><img src="https://img-blog.csdnimg.cn/20191128132611675.png" alt="在这里插入图片描述"><br>这条命令的意思是-d参数打开反汇编程序内容 -M intel参数用于设置汇编代码格式因为ida使用的习惯所以设置为intel  后面跟上文件路径，然后导出为aa.txt文件并打开文件<br><img src="https://img-blog.csdnimg.cn/20191128132822550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开后如图<br>和ida相比没有伪代码等功能只有一个看汇编命令的窗口<br>然后举例说明怎么寻找溢出点<br><img src="https://img-blog.csdnimg.cn/20191128132904337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先找到main函数开始查看<br>利用call函数寻找自定义函数跟进查看<br><img src="https://img-blog.csdnimg.cn/20191128132936836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后寻找可能出现溢出的函数 比如fgets函数是读取指定数量的数据并保存到指定地址上 如图是调用函数然后eax入栈 ebp向上开辟0x28的空间然后读取0x32保存到eax当中。<br>因此这就造成了一个缓冲区溢出。<br><img src="https://img-blog.csdnimg.cn/20191128133007462.png" alt="在这里插入图片描述"><br>-t参数可以查看符号表 grep是过滤作用 F是显示函数名<br><img src="https://img-blog.csdnimg.cn/20191128133059888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191128133114935.png" alt="在这里插入图片描述"><br>-j参数可以查看指定一个段的内容 还是上道题为例 因为bin/cat flag.txt为字符串所以需要到rodata寻找 -d参数是为了将查找的结果通过反汇编显示出来<br><img src="https://img-blog.csdnimg.cn/20191128133152529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB:"></a>GDB:</h2><p>gdb有个算是ui的操作界面<br>命令是gdb-tui 然后可以file装载文件<br><img src="https://img-blog.csdnimg.cn/20191128133316369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>装载过后就需要和objdump一样改格式和打开汇编窗口了另外可以再打开一个寄存器窗口方便分析<br><img src="https://img-blog.csdnimg.cn/20191128133349541.png" alt="在这里插入图片描述"><br>第一条意思是更改格式为Intel 然后开启汇编和寄存器窗口<br>开启后如图<br><img src="https://img-blog.csdnimg.cn/20191128133405868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后介绍一下快捷键：<br>b为下断点 可以b (函数名)或者b* (函数地址)<br><img src="https://img-blog.csdnimg.cn/20191128133431319.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191128133439302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以开启动态调试了<br><img src="https://img-blog.csdnimg.cn/20191128133514521.png" alt="在这里插入图片描述"><br>先要在python中打开文件获取pid<br><img src="https://img-blog.csdnimg.cn/20191128133546775.png" alt="在这里插入图片描述"><br>然后attach命令开启动态调试<br><img src="https://img-blog.csdnimg.cn/20191128133617668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后使用c继续执行可以执行文件到需要输入的地方<br><img src="https://img-blog.csdnimg.cn/20191128133645201.png" alt="在这里插入图片描述"><br>然后发送一条数据<br><img src="https://img-blog.csdnimg.cn/20191128133711791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>高亮就是这次发送数据发生变化的寄存器<br>另外还有 ni si<br>ni作用是运行一条函数 si则是跟进函数<br><img src="https://img-blog.csdnimg.cn/20191128133736870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191128133744154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lsbHlhc3ZpZWw0MDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而回车则是重复执行你输入的上一条指令。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
